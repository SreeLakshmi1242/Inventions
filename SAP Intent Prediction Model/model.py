# -*- coding: utf-8 -*-
"""Final_denave_assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QZU_2uVhiNvvpcCPIhlkTmSQn-PYkW4l

# **SAP Solutions Intent Score Calculation Task**

## **Aim**
To create a comprehensive analysis of a company&#39;s likelihood to require specific SAP
solutions. This analysis will help the team to better understand the potential client needs and tailor the
approach accordingly.

###### **SAP Solutions to focus on are**

1. SAP S/4HANA
2. SAP SuccessFactors
3. SAP Ariba

### **Indicators List**

The list of indicators that we are using to suggest a SAP solution to a company are

1. **Company Name**: [Company Name]
2. **Industry** : [Industry Type]
3. **Company Size**: [Number of Employees]
4. **Annual Revenue**: [Annual Revenue]
5. **Global Presence**: [Yes/No]
6. **Existing ERP Systems**: [Yes/No/Details]
7. **HR Department Size**: [Number of Employees]
8. **Current HR Software**: [Yes/No/Details]
9. **Employee Turnover Rate**: [Percentage]
10. **Growth Rate**: [Percentage]
11. **Size of Procurement Department**: [Number of Employees]
12. **Number of Suppliers**: [Number]
13. **Annual Procurement Spend**: [Amount]
14. **Complexity of Supply Chain**: [Low/Medium/High]
15. **Current Procurement Systems**: [Yes/No/Details]


### **LLM Models**

1. **mistralai/Mistral-7B-Instruct-v0.2**
2. **HuggingFaceH4/zephyr-7b-beta**

## **Methodology**

The project is designed as an Initial Prompt followed by a RAG Prompt for efficient tokenization -

*  Initial Prompt
  * An Initial prompt is designed to generate intent score and short reasoning for the score based on the company's profile as per the Indicators list
  
* RAG Prompt
  * A pdf document explaining the three SAP solutions and its uses are used in the RAG to ensure validation and reduce hallucinations.
  * The document, along with the score and reasoning generated in the initial prompt is then used in this prompt to retreive the detailed reasoning and factors affecting increase/decrease in score in a structured format

### **Code**

"""### **Import required packages**"""

import os
import numpy as np
import torch
from getpass import getpass
from sklearn.metrics.pairwise import cosine_similarity
from transformers import pipeline, AutoTokenizer, AutoModel
from google.colab import files

from langchain import hub, LLMChain
from langchain.llms import HuggingFaceHub, HuggingFacePipeline
from langchain.prompts import PromptTemplate
from langchain.chains import RetrievalQA, ConversationalRetrievalChain
from langchain.memory import ConversationBufferMemory

from langchain_community.llms import HuggingFaceEndpoint
from langchain_community.chat_models.huggingface import ChatHuggingFace
from langchain_community.embeddings import HuggingFaceHubEmbeddings, HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma
from langchain_community.document_loaders import PyPDFLoader

from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain.document_loaders.csv_loader import CSVLoader
import warnings
warnings.filterwarnings("ignore")

"""### **Provide your HuggingFace api key/access token**"""

# Enter your HuggingFace access token when prompted

pass_token = getpass("Enter your HuggingFace access token: ")

os.environ["HF_TOKEN"] = pass_token
os.environ["HUGGINGFACEHUB_API_TOKEN"] = pass_token

del pass_token

"""**Function to get Initial Prompt result. The company's profile data (indicators list) will be entered here**"""

def initial_prompt(model):

  llm = HuggingFaceEndpoint(
    repo_id=model,
    task="text-generation",
    max_new_tokens = 5000,
    top_k = 30,
    temperature = 0.1,
    repetition_penalty = 1.03,
)
  name=str(input("Name of the Company :"))
  industry=str(input("Industry of the Company :"))
  employees=str(input("Number of employees :"))
  revenue=str(input("Annual Revenue in Cr:"))
  erp=str(input("Existing ERP Systems :"))
  hr_emp=str(input("HR Department Size :"))
  hr_soft=str(input("Current HR Software :"))
  emp_turn_over=str(input("Employee Turnover Rate % :"))
  growth=str(input("Growth Rate % :"))
  procurement_dept=str(input("Size of Procurement Department :"))
  suppliers=str(input("Number of Suppliers :"))
  spend=str(input("Annual Procurement Spending in Cr :"))
  supply_chain=str(input("Complexity of Supply Chain (low/medium/high) :"))
  procure=str(input("Current Procurement Systems :"))

  company_profile="""
     {name} is a company belonging to {industry} industry. The company profile is as follows

      Company Size: {employees}
      Annual Revenue: {revenue} Crores
      Existing ERP Systems: {erp}
      HR Department Size: {hr_emp}
      Current HR Software: {hr_soft}
      Employee Turnover Rate: {emp_turn_over} %
      Growth Rate: {growth} %
      Size of Procurement Department: {procurement_dept}
      Number of Suppliers: {suppliers}
      Annual Procurement Spend: {spend} Crores
      Complexity of Supply Chain: {supply_chain}
      Current Procurement Systems: {procure}""".format(name=name,
      industry=industry,
      employees=employees,
      revenue=revenue,
      erp=erp,
      hr_emp=hr_emp,
      hr_soft=hr_soft,
      emp_turn_over=emp_turn_over,
      growth=growth,
      procurement_dept=procurement_dept,
      suppliers=suppliers,
      spend=spend,
      supply_chain=supply_chain,
      procure=procure)

  prompt_template = PromptTemplate.from_template(
  """You are a SAP solutions expert in SAP S/4HANA, SAP SuccessFactors and SAP Ariba.

      {company_profile}

      Generate Intent Score for the SAP solutions - SAP S/4HANA, SAP SuccessFactors, SAP Ariba:

      Intent Score: Based on company profile, provide intent score (0-10) for adopting this SAP solution. Provide only a numeric score and reasoning for the score in 5 words

      Example

      SAP  S/4HANA:
      Intent Score: 8


      SAP  SuccessFactors:
      Intent Score: 5


      SAP  Ariba:
      Intent Score: 7

  """)

  messages = prompt_template.format(company_profile=company_profile)
  chat_model = ChatHuggingFace(llm = llm)

  content=[]
  response = chat_model.invoke(messages)
  content.append(response.content)
  return company_profile,content

"""**Function to vectorise RAG document**"""

def vector(doc,embedding):
  chroma_db_dir = "./chroma_vector_db"
# Create the directory if it doesn't exist
  os.makedirs(chroma_db_dir, exist_ok=True)

  !rm -rf ./docs/chroma  # remove old database files if any

  embedding = HuggingFaceHubEmbeddings()

  vectordb = Chroma.from_documents(
      documents=doc, # splits we created earlier
      embedding=embedding,
      persist_directory=chroma_db_dir # save the directory
)
  return vectordb

"""**Function to load, embed and vectorise document**"""

def doc_process(path):
# Load PDF
  loaders = [
      # Duplicate documents on purpose
      PyPDFLoader(path),
  ]
  docs = []
  for loader in loaders:
      docs.extend(loader.load())

  # Split
  #from langchain.text_splitter import RecursiveCharacterTextSplitter
  text_splitter = RecursiveCharacterTextSplitter(
      chunk_size = 500,
      chunk_overlap = 50
  )

  splits = text_splitter.split_documents(docs)
  embedding = HuggingFaceHubEmbeddings()

  vectordb=vector(doc=splits,embedding=embedding)

  return vectordb

"""**Function to get RAG Prompt results**"""

def run_rag(model,vectordb,company_profile,content):
  chat_llm = HuggingFaceEndpoint(
    repo_id=model,
    task="text-generation",
    max_new_tokens = 1000,
    top_k = 30,
    temperature = 0.1,
    repetition_penalty = 1.03,)

  llm = ChatHuggingFace(llm=chat_llm)
  prompt = hub.pull("rlm/rag-prompt")


  # Build prompt
  template = """
  You are a SAP solutions expert in SAP S/4HANA, SAP SuccessFactors and SAP Ariba.Use the following pieces of context to answer the question at the end.
  If you don't know the answer, just say that you don't know, don't try to make up an answer.
  Always say "thanks for asking!" at the end of the answer.

  {context}
  Question: {question}
  Helpful Answer:"""
  QA_CHAIN_PROMPT = PromptTemplate(input_variables=["context", "question"],template=template,)
  qa_chain = RetrievalQA.from_chain_type(llm,
                                       retriever=vectordb.as_retriever(search_type="mmr",search_kwargs={"k": 2, "fetch_k":6} ), # "k":2, "fetch_k":3
                                       chain_type_kwargs={"prompt": QA_CHAIN_PROMPT},
                                       return_source_documents=True
                                       )

  saps=['SAP S/4HANA','SAP SuccessFactors','SAP Ariba']
  results =[]
  for sap in saps:

    question = """
        {company_profile}

        {content}

       Do not provide any summary. Output should be provided as a bullet-point list as follows .

      For the {sap}

        * Intent Score :
        * Reasoning : Justification for the intent score (based on the company's details provided)
        * Factors Increasing Intent Score:
          - Challenges the company is facing.
          - Current systems or processes that align with the capabilities of the SAP solution.
        * Factors Decreasing Intent Score:
          - Areas where the SAP solution might not be the best fit.
          - Conflicting objectives or systems already in place.

    """.format(company_profile=company_profile,content=content,sap=sap)
    result = qa_chain.invoke({"query": question})
    results.append(result["result"])
  return results[0],results[1],results[2]

"""## **Results**

#### **LLM - mistralai/Mistral-7B-Instruct-v0.2**
"""

model="mistralai/Mistral-7B-Instruct-v0.2"

company_profile,content=initial_prompt(model)
#FYI : some of the values of indicators are dummy values

vectordb=doc_process("/content/SAP_doc.pdf")

hana,successfactors,ariba=run_rag(model=model,vectordb=vectordb,company_profile=company_profile,content=content)

print(hana)

print(successfactors)

print(ariba)

"""#### **LLM - HuggingFaceH4/zephyr-7b-beta**"""

model="HuggingFaceH4/zephyr-7b-beta"

company_profile,content=initial_prompt(model)

vectordb=doc_process("/content/SAP_doc.pdf")

hana,successfactors,ariba=run_rag(model=model,vectordb=vectordb,company_profile=company_profile,content=content)

print(hana)

print(successfactors)

print(ariba)

"""## **Conclusion**
 * **SAP S/4HANA** is given an intent score 9 by both LLM models
 * **SAP SuccessFactors** is given an intent score 6 by both LLM models
 * **SAP Ariba** is given an intent score 9 by Mistral and score 8 by zephyr-7b-beta. The scores are not consistent across models

 Based on the above, SAP S\4HANA is a good SAP solution to implement for Ask Automotive Limited
"""
